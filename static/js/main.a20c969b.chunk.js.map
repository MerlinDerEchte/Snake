{"version":3,"sources":["Settings/Settings.js","Game/Directions/Directions.js","Game/Element/Element.js","Game/Field/Field.js","Game/GameOverOverlay/GameOverOverlay.js","Game/Directions/getReverseDirections.js","Game/Snake/Snake.js","General/throttle.js","Game/Game.js","App.js","reportWebVitals.js","index.js"],"names":["difficulties","Settings","props","useState","difficulty","modelDifficulty","setModelDifficulty","mirroring","modelMirroring","setModelMirroring","id","onSubmit","e","stopPropagation","setDifficulty","setMirroring","setShowSettings","className","value","onChange","target","map","dif","index","stringBoolean","setBooleanModelMirroring","type","Directions","Object","freeze","LEFT","RIGHT","TOP","BOTTOM","Element","x","y","this","Field","width","height","GameOverOverlay","score","onClick","resetGame","getReverseDirection","direction","Snake","elements","eats","el","element","length","newX","newY","newElement","pop","unshift","boolValue","newDirection","throttle","func","limit","lastFunc","lastRan","context","args","arguments","clearTimeout","setTimeout","Date","now","apply","speedLevels","Game","addElements","setAddElements","setNewElement","playGround","gameOver","setGameOver","round","setRound","setScore","snake","setSnake","fields","Array","getWidth","getHeight","gameContainerClass","createNewElement","size","i","possibleFieldIndizes","isInSnakeElements","push","newFieldIndex","Math","floor","random","headIncluded","indexInElements","forEach","getDirectionFromMarginClick","event","preventDefault","console","log","isTop","isBottom","isLeft","isRight","throttledKeyDown","key","onKeyPressed","document","addEventListener","useEffect","myTimeout","setDirection","getTail","addTailElement","shift","setEats","getHeadPosition","mirrorMove","move","removeEventListener","field","head","isSnakeHead","getLength","isInNewElement","App","showSettings","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"8OAOMA,EAAc,CAAC,EAAE,EAAE,GAsGVC,MApGf,SAAkBC,GAAO,IAAD,EAC0BC,mBAASD,EAAME,YADzC,mBACbC,EADa,KACIC,EADJ,OAEwBH,mBAASD,EAAMK,WAFvC,mBAEbC,EAFa,KAEGC,EAFH,KAgCpB,OACI,qBAAKC,GAAG,kBAAR,SACI,sBAAKA,GAAG,eAAR,UACI,qBAAKA,GAAG,iBAAR,sBACA,uBAAMA,GAAG,eAAeC,SAAU,SAAAC,GAAC,OAAkBA,EAXvDC,kBACNX,EAAMY,cAAcT,GACpBH,EAAMa,aAAaP,QACnBN,EAAMc,iBAAgB,IAQd,UAGQ,sBAAKC,UAAU,cAAf,UACI,qBAAKA,UAAU,yBAAf,wBACA,qBAAKA,UAAU,iBAAf,SACI,sBAAKA,UAAU,gBAAf,UACI,cAAC,IAAD,IADJ,IACoB,4CAKxB,sBAAKA,UAAU,iBAAf,UACI,sBAAKA,UAAU,gBAAf,UACI,cAAC,IAAD,IADJ,KACmB,0CAEnB,sBAAKA,UAAU,gBAAf,UACI,cAAC,IAAD,IADJ,IACsB,0CAEtB,sBAAKA,UAAU,gBAAf,UACI,cAAC,IAAD,IADJ,IACqB,gDAM7B,sBAAKA,UAAU,cAAf,UACI,qBAAKA,UAAU,yBAAf,wBACA,qBAAKA,UAAU,GAAf,SACI,wBAASC,MAAOb,EAAiBc,SAAU,SAACP,GAAD,OAAON,EAAmBM,EAAEQ,OAAOF,QAA9E,SACKlB,EAAaqB,KAAI,SAACC,EAAIC,GACnB,OAAO,wBAAsBL,MAAOI,EAA7B,SAAmCA,GAApBC,aAWtC,sBAAKN,UAAU,cAAf,UACI,qBAAKA,UAAU,yBAAf,4BACA,qBAAKA,UAAU,GAAf,SACI,yBAAQC,MAAOV,EAAgBW,SAAU,SAACP,GAAD,OA5ErE,SAAkCY,GAC9B,OAAOA,GAEH,QACQf,GAAkB,GAClB,MACR,IAAK,OACGA,GAAkB,GAClB,MACR,IAAK,QACGA,GAAkB,IAkE0CgB,CAAyBb,EAAEQ,OAAOF,QAAlF,UACI,wBAAgBA,OAAQ,EAAxB,kBAAa,GACb,wBAAgBA,OAAS,EAAzB,iBAAa,WAKzB,qBAAKD,UAAU,cAAf,SACI,wBAAQP,GAAG,eAAegB,KAAK,SAA/B,6B,QC3FbC,EAPIC,OAAOC,OAAO,CAC7BC,KAAK,OACLC,MAAM,QACNC,IAAI,MACJC,OAAO,W,OCGIC,EANX,WAAYC,EAAEC,GAAG,oBACbC,KAAKF,EAAIA,EACTE,KAAKD,EAAIA,G,QCWFE,E,WAbX,WAAYC,EAAOC,GAAQ,oBACvBH,KAAKE,MAAQA,EACbF,KAAKG,OAASA,E,uDAId,OAAOH,KAAKE,Q,kCAGZ,OAAOF,KAAKG,W,KCQLC,MAff,SAAyBvC,GAGrB,OACI,qBAAKQ,GAAG,kBAAR,SACI,sBAAKA,GAAG,wBAAR,UACI,sBAAMA,GAAG,eAAT,sBACA,uBAAMA,GAAG,YAAT,4BAAqCR,EAAMwC,SAC3C,wBAAQhC,GAAG,iBAAiBiC,QAAWzC,EAAMc,gBAA7C,sBACA,wBAAQN,GAAG,gBAAgBiC,QAASzC,EAAM0C,UAA1C,2BCGDC,EAbY,SAACC,GAExB,OAAOA,GAEH,KAAKnB,EAAWM,OAAQ,OAAON,EAAWK,IAC1C,KAAKL,EAAWK,IAAK,OAAOL,EAAWM,OACvC,KAAKN,EAAWG,KAAM,OAAOH,EAAWI,MACxC,KAAKJ,EAAWI,MAAO,OAAOJ,EAAWG,KACzC,QAAU,OAAO,OCoHViB,E,WAzHX,WAAYD,EAAWE,EAASC,GAAO,oBACnCZ,KAAKS,UAAYA,EACjBT,KAAKW,SAAWA,EAChBX,KAAKY,KAAOA,E,2DAIDC,GACXb,KAAKW,SAAL,sBAAoBX,KAAKW,UAAzB,CAAmCE,M,iCAG5BC,GACPd,KAAKW,SAAL,CAAiBG,GAAjB,mBAA6Bd,KAAKW,a,oCAGlCX,KAAKW,SAAS3B,KAAI,SAAA6B,GAAE,OAAIA,O,gCAIxB,OAAOb,KAAKW,SAASX,KAAKW,SAASI,OAAO,K,wCAI1C,OAAOf,KAAKW,SAAS,K,kCAGrB,OAAOX,KAAKW,SAASI,S,6BAIrB,OAAOf,KAAKS,WACR,QAAS,OACT,KAAKnB,EAAWI,MAEZ,IAAMsB,EAAOhB,KAAKW,SAAS,GAAGb,EAAG,EAC3BmB,EAAOjB,KAAKW,SAAS,GAAGZ,EACxBmB,EAAa,IAAIrB,EAAQmB,EAAMC,GACrCjB,KAAKW,SAASQ,MACdnB,KAAKW,SAASS,QAAQF,GACtB,MAEJ,KAAK5B,EAAWG,KAEZ,IAAMyB,EAAa,IAAIrB,EAAQG,KAAKW,SAAS,GAAGb,EAAG,EAAGE,KAAKW,SAAS,GAAGZ,GACvEC,KAAKW,SAASQ,MACdnB,KAAKW,SAASS,QAAQF,GACtB,MAEJ,KAAK5B,EAAWK,IAEZ,IAAMuB,EAAa,IAAIrB,EAAQG,KAAKW,SAAS,GAAGb,EAAGE,KAAKW,SAAS,GAAGZ,EAAG,GACvEC,KAAKW,SAASQ,MACdnB,KAAKW,SAASS,QAAQF,GACtB,MAEJ,KAAK5B,EAAWM,OAEZ,IAAMsB,EAAa,IAAIrB,EAAQG,KAAKW,SAAS,GAAGb,EAAGE,KAAKW,SAAS,GAAGZ,EAAG,GACvEC,KAAKW,SAASQ,MACdnB,KAAKW,SAASS,QAAQF,M,iCAMvBhB,EAAOC,GACd,OAAOH,KAAKS,WAER,QAAS,OACT,KAAKnB,EAAWG,KAEZ,IAAMuB,EAAOd,EAAO,EACde,EAAOjB,KAAKW,SAAS,GAAGZ,EACxBmB,EAAa,IAAIrB,EAAQmB,EAAMC,GACrCjB,KAAKW,SAASQ,MACdnB,KAAKW,SAASS,QAAQF,GACtB,MAEJ,KAAK5B,EAAWI,MAEZ,IACMuB,EAAOjB,KAAKW,SAAS,GAAGZ,EACxBmB,EAAa,IAAIrB,EAFV,EAEwBoB,GACrCjB,KAAKW,SAASQ,MACdnB,KAAKW,SAASS,QAAQF,GACtB,MAEJ,KAAK5B,EAAWK,IAEZ,IAAMqB,EAAOhB,KAAKW,SAAS,GAAGb,EAExBoB,EAAa,IAAIrB,EAAQmB,EADlBb,EAAO,GAEpBH,KAAKW,SAASQ,MACdnB,KAAKW,SAASS,QAAQF,GACtB,MAEJ,KAAK5B,EAAWM,OAEZ,IAAMoB,EAAOhB,KAAKW,SAAS,GAAGb,EAExBoB,EAAa,IAAIrB,EAAQmB,EADlB,GAEbhB,KAAKW,SAASQ,MACdnB,KAAKW,SAASS,QAAQF,M,8BAO1BG,GACJrB,KAAKY,KAAOS,I,mCAEHC,GACNA,IAAiBd,EAAoBR,KAAKS,aAGzCT,KAAKS,UAAYa,O,sBCjGZC,MAxBjB,SAAmBC,EAAMC,GACrB,IAAIC,EACAC,EAEJ,OAAO,WACL,IAAMC,EAAU5B,KACV6B,EAAOC,UAERH,GAKHI,aAAaL,GACbA,EAAWM,YAAW,WACfC,KAAKC,MAAQP,GAAYF,IAC5BD,EAAKW,MAAMP,EAASC,GACpBF,EAAUM,KAAKC,SAEhBT,GAASQ,KAAKC,MAAQP,MATzBH,EAAKW,MAAMP,EAASC,GACpBF,EAAUM,KAAKC,SCEjBE,EAAc,CAAC,IAAI,IAAI,IA0RdC,MAzRf,SAAcxE,GAAO,IAAD,EACsBC,mBAAS,IAD/B,mBACTwE,EADS,KACIC,EADJ,OAEoBzE,mBAAS,IAAI+B,EAAQ,EAAE,IAF3C,mBAETqB,EAFS,KAEGsB,EAFH,OAGoB1E,mBAAS,IAAImC,EAAM,GAAG,KAH1C,mBAGTwC,EAHS,aAIgB3E,oBAAS,IAJzB,mBAIT4E,EAJS,KAICC,EAJD,OAKS7E,mBAAS,GALlB,mBAKT8E,EALS,KAKHC,EALG,OAMU/E,mBAAS,GANnB,mBAMTuC,EANS,KAMFyC,EANE,OAOUhF,mBAAS,IAAI4C,EAAMpB,EAAWI,MAAO,CAAC,IAAIG,EAAQ,EAAE,GAAI,IAAIA,EAAQ,EAAE,KAAM,IAPtF,mBAOTkD,EAPS,KAOFC,EAPE,KASVC,EAAM,YAAMC,MAAMT,EAAWU,WAAaV,EAAWW,cAIrDC,EAAqBxF,EAAMK,UAAY,2BAA6B,0BAsD1E,SAASoF,EAAiBC,GAItB,IAHA,IAAIC,EAAI,EACJC,EAAuB,GAEpBD,EAAID,EAAMC,KACoB,IAA9BE,EAAkBF,GAAE,IACnBC,EAAqBE,KAAKH,GAIlC,IAAII,EAAgBH,EAAqBI,KAAKC,MAAMD,KAAKE,SAASN,EAAqB1C,SACnFG,EAAa,IAAIrB,EAAQ+D,EAAgBnB,EAAWU,WAAYU,KAAKC,MAAMF,EAAgBnB,EAAWW,cAC1GZ,EAActB,GAclB,SAASwC,EAAmBxE,EAAO8E,GAE/B,GAAGA,EACH,CACI,IAAIC,GAAkB,EAO1B,OANIlB,EAAMpC,SAASuD,SAAQ,SAACrD,GAErBA,EAAGf,IAAOZ,EAAQuD,EAAWU,YAAetC,EAAGd,IAAM8D,KAAKC,MAAM5E,EAAMuD,EAAWW,eACjFa,GAAkB,MAGlBA,EAIH,IAAIA,GAAkB,EAQtB,OAPAlB,EAAMpC,SAASuD,SAAQ,SAACrD,EAAG2C,GAEpBA,EAAI,GAAK3C,EAAGf,IAAOZ,EAAQuD,EAAWU,YAAetC,EAAGd,IAAM8D,KAAKC,MAAM5E,EAAMuD,EAAWW,eAE7Fa,GAAkB,MAGfA,EAIf,SAASE,EAA4BC,EAAMlF,GACvCkF,EAAMC,iBACND,EAAM5F,kBACN8F,QAAQC,IAAI,WACZ,IAAMC,EAAQX,KAAKC,MAAM5E,EAAQuD,EAAWW,cAAgB,EACtDqB,EAAYZ,KAAKC,MAAM5E,EAAQuD,EAAWW,cAAgB,GAC1DsB,EAAUxF,EAAQuD,EAAWU,YAAe,EAC5CwB,EAAWzF,EAAQuD,EAAWU,YAAe,IAEhDqB,GAAUE,GAAWC,IACpBL,QAAQC,IAAI,OACZjD,EAAehC,EAAWK,MAE3B8E,GAAaC,GAAWC,IACvBrD,EAAehC,EAAWM,SAG3B+E,GAAYF,GAAaD,IACxBlD,EAAehC,EAAWI,QAE3BgF,GAAWD,GAAaD,IACvBlD,EAAehC,EAAWG,MA4ClC,IAAI6B,EAAe,KAEbsD,EAAmB,SAACrG,GAAD,OAAOgD,EAhChC,SAAsBhD,GAClB,IAAI+C,EAEA,OAAO/C,EAAEsG,KAEL,QAAS,OACT,IAAK,IACL,IAAK,IACL,IAAK,UAAWvD,EAAehC,EAAWK,IAAI,MAC9C,IAAK,IACL,IAAK,IACL,IAAK,YAAa2B,EAAehC,EAAWM,OAAQ,MACpD,IAAK,IACL,IAAK,IACL,IAAK,aAAc0B,EAAehC,EAAWI,MAAO,MACpD,IAAK,IACL,IAAK,IACL,IAAK,YAAc4B,EAAehC,EAAWG,MAehBqF,CAAavG,GAAG,MA+BzD,OA9BAwG,SAASC,iBAAiB,WAAW,SAACzG,GAAD,OAAMqG,EAAiBrG,MAG5D0G,qBAAU,WAEN,IAAIvC,EAGA,IAAIwC,EAAYlD,YAAW,WAzK5BV,GACCyB,EAAMoC,aAAa7D,GAbpBgB,EAAYvB,OAAS,GAAKuB,EAAY,GAAGxC,IAAMiD,EAAMqC,UAAUtF,GAAKwC,EAAY,GAAGvC,IAAMgD,EAAMqC,UAAUrF,IAGpGgD,EAAMsC,eAAe/C,EAAY,IAEjCA,EAAYgD,QACc,IAAvBhD,EAAYvB,QACXgC,EAAMwC,SAAQ,IAWvBxC,EAAMyC,kBAAkB1F,IAAMoB,EAAWpB,GAC5CiD,EAAMyC,kBAAkBzF,IAAMmB,EAAWnB,IAErCgD,EAAMwC,SAAQ,GAEdjD,EAAYqB,KAAKzC,GACjBoC,EAAiBb,EAAWW,YAAcX,EAAWU,YAGrDL,EAASzC,EAAO,IAKjBqD,EAAkBX,EAAMyC,kBAAkB1F,EAAKiD,EAAMyC,kBAAkBzF,EAAI0C,EAAWW,aAAe,IAE5FkB,QAAQC,IAAI,aACZ5B,GAAY,IAES,IAAxBI,EAAMpC,SAAS,GAAGb,GAAWiD,EAAMtC,YAAcnB,EAAWG,MAC5DsD,EAAMpC,SAAS,GAAGb,IAAO2C,EAAWU,WAAY,GAAKJ,EAAMtC,YAAcnB,EAAWI,OAC5D,IAAxBqD,EAAMpC,SAAS,GAAGZ,GAAWgD,EAAMtC,YAAcnB,EAAWK,KAC5DoD,EAAMpC,SAAS,GAAGZ,IAAM0C,EAAWW,YAAY,GAAKL,EAAMtC,YAAcnB,EAAWM,OAEjF/B,EAAMK,UACL6E,EAAM0C,WAAWhD,EAAWU,WAAYV,EAAWW,aAEnDT,GAAY,GAGpBI,EAAM2C,OA2IF7C,EAASD,EAAM,KACjBR,EAAYvE,EAAME,WAAW,IAInC,OAAO,WACHgE,aAAamD,GAEZH,SAASY,oBAAoB,WAAW,SAACpH,GAAD,OAAKqG,EAAiBrG,SAGpE,CAACqE,IAKG,mCACC,sBAAKhE,UAAU,kBAAf,UACI,sBAAKA,UAAU,iBAAf,oBACQyB,KAER,sBAAKzB,UAAWyE,EAAhB,UACKX,EAED,cAAC,EAAD,CACI/D,gBAAmBd,EAAMc,gBACzB0B,MAAOA,EACPE,UArDpB,WACIuC,EAAS,GACTH,GAAY,GACZW,EAAiBb,EAAWU,WAAYV,EAAWW,aACnDJ,EAAS,IAAItC,EAAMpB,EAAWI,MAAO,CAAC,IAAIG,EAAQ,EAAE,GAAI,IAAIA,EAAQ,EAAE,KAAM,IAC5E0C,EAAe,IACfM,EAAS,MAiDG,GAECI,EAAOjE,KAAI,SAAC4G,EAAM1G,GACf,OAvFpB,SAAqBA,GACjB,IAAM2G,EAAO9C,EAAMpC,SAAS,GAC5B,OAAGzB,EAAQuD,EAAWU,aAAe0C,EAAK/F,GAAK+D,KAAKC,MAAM5E,EAAMuD,EAAWW,eAAiByC,EAAK9F,EAqF9E+F,CAAY5G,GACJ,qBACKb,GAAG,YACHiC,QAAS,SAAA8D,GAAK,OAAID,EAA4BC,EAAMlF,KAF/CA,GAGZwE,EAAkBxE,GAAM,GAE1B6D,EAAMgD,YAAa,GACX,qBAECnH,UAAU,kBACV0B,QAAS,SAAA8D,GAAK,OAAID,EAA4BC,EAAMlF,IAHrD,SAG6D,sCAFvDA,GAGR6D,EAAMgD,YAAc,GAClB,qBAEKnH,UAAU,mBACV0B,QAAS,SAAA8D,GAAK,OAAID,EAA4BC,EAAMlF,IAHzD,cACUA,GAIV,qBAEKN,UAAU,iBACV0B,QAAS,SAAA8D,GAAK,OAAID,EAA4BC,EAAMlF,IAHzD,cACUA,GAxK7C,SAAwBA,GACpB,OAAGgC,EAAWpB,IAAMZ,EAAQuD,EAAWU,YAAcjC,EAAWnB,IAAM8D,KAAKC,MAAM5E,EAAMuD,EAAWW,aA4KzE4C,CAAe9G,GAEb,qBAEKN,UAAU,eACV0B,QAAS,SAAA8D,GAAK,OAAID,EAA4BC,EAAMlF,IAHzD,SAIK,cAAC,IAAD,KAHKA,GAQV,qBAEKN,UAAU,QACV0B,QAAS,SAAA8D,GAAK,OAAID,EAA4BC,EAAMlF,KAF/CA,e,MCtP9B+G,MAhCf,WAAgB,IAAD,EAC2BnI,oBAAS,GADpC,mBACNoI,EADM,KACQvH,EADR,OAEuBb,mBAAS,GAFhC,mBAENC,EAFM,KAEMU,EAFN,OAGqBX,oBAAS,GAH9B,mBAGNI,EAHM,KAGKQ,EAHL,KAMb,OADA4F,QAAQC,IAAIrG,GAEV,qBAAKG,GAAG,gBAAR,SAGI6H,EAEA,cAAC,EAAD,CACInI,WAAYA,EACZU,cAAiBA,EACjBP,UAAWA,EACXQ,aAAgBA,EAChBC,gBAAmBA,IAEvB,cAAC,EAAD,CACEZ,WAAcA,EACdG,UAAaA,EACbS,gBAAmBA,OCfdwH,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF/B,SAASgC,eAAe,SAM1BZ,K","file":"static/js/main.a20c969b.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport ArrowBack from '@material-ui/icons/ArrowBack';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport ArrowForward from '@material-ui/icons/ArrowForward';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\n\r\n\r\nconst difficulties =[1,2,3]\r\n\r\nfunction Settings(props){\r\n    const [modelDifficulty, setModelDifficulty] = useState(props.difficulty);\r\n    const [modelMirroring, setModelMirroring] = useState(props.mirroring);\r\n\r\n\r\n    function setBooleanModelMirroring(stringBoolean){\r\n        switch(stringBoolean)\r\n        {\r\n            default:\r\n                    setModelMirroring(false);\r\n                    break;\r\n            case \"true\":\r\n                    setModelMirroring(true);\r\n                    break;\r\n            case \"false\":\r\n                    setModelMirroring(false)\r\n        }\r\n    }\r\n\r\n    function setNumberModelDifficulty(stringNumber)\r\n    {\r\n        setModelDifficulty(parseInt(stringNumber))\r\n\r\n    }\r\n    function submitFunction(event){\r\n        event.stopPropagation();\r\n        props.setDifficulty(modelDifficulty);\r\n        props.setMirroring(modelMirroring);\r\n        props.setShowSettings(false);\r\n\r\n    }\r\n\r\n    return(\r\n        <div id=\"SettingsOverlay\">\r\n            <div id=\"SettingsMain\">\r\n                <div id=\"SettingsHeader\">Settings</div>\r\n                <form id=\"SettingsForm\" onSubmit={e=> submitFunction(e)}>\r\n\r\n\r\n                        <div className=\"settingPart\">\r\n                            <div className=\"settingPartDescription\">Navigation</div>\r\n                            <div className=\"arrowContainer\">\r\n                                <div className=\"arrowOrLetter\">\r\n                                    <ArrowUpward /> <span>/ W</span>\r\n                                </div>\r\n                                \r\n                                \r\n                            </div>\r\n                            <div className=\"arrowContainer\">\r\n                                <div className=\"arrowOrLetter\">\r\n                                    <ArrowBack />  <span>/ A</span>\r\n                                </div>\r\n                                <div className=\"arrowOrLetter\">\r\n                                    <ArrowDownward /> <span>/ S</span>\r\n                                </div>\r\n                                <div className=\"arrowOrLetter\">\r\n                                    <ArrowForward /> <span>/ D</span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                        <div className=\"settingPart\">\r\n                            <div className=\"settingPartDescription\">Difficulty</div>\r\n                            <div className=\"\">\r\n                                <select  value={modelDifficulty} onChange={(e) => setModelDifficulty(e.target.value)}>\r\n                                    {difficulties.map((dif,index) => {\r\n                                        return <option key = {index} value={dif}>{dif}</option>\r\n                                    })\r\n                                    }\r\n                                </select>\r\n\r\n\r\n\r\n\r\n                            </div>\r\n                        </div>\r\n                    \r\n                        <div className=\"settingPart\">\r\n                            <div className=\"settingPartDescription\">Wall mirroring</div>\r\n                            <div className=\"\">\r\n                                <select value={modelMirroring} onChange={(e) => setBooleanModelMirroring(e.target.value)}>\r\n                                    <option key={1} value ={false}>false</option>\r\n                                    <option key={2} value = {true}>true</option>\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"settingPart\">\r\n                            <button id=\"submitButton\" type=\"submit\">Play</button>\r\n                        </div>\r\n                    \r\n                </form>\r\n            \r\n            \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings;","const Directions = Object.freeze({\r\n    LEFT:\"LEFT\",\r\n    RIGHT:\"RIGHT\",\r\n    TOP:\"TOP\",\r\n    BOTTOM:\"BOTTOM\"\r\n});\r\n\r\nexport default Directions;","class Element{\r\n    constructor(x,y){\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\n\r\nexport default Element;","class Field{\r\n    constructor(width, height){\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    getWidth(){\r\n        return this.width;\r\n    }\r\n    getHeight(){\r\n        return this.height;\r\n    }\r\n\r\n}\r\nexport default Field;","import React from 'react';\r\n\r\n\r\nfunction GameOverOverlay(props){\r\n\r\n\r\n    return(\r\n        <div id=\"gameOverOverlay\">\r\n            <div id=\"gameOverOverlayCenter\">\r\n                <span id=\"gameOverText\">GameOver</span>\r\n                <span id=\"scoreText\">Your score is: {props.score}</span>\r\n                <button id=\"settingsButton\" onClick = {props.setShowSettings}>Settings</button>\r\n                <button id=\"newGameButton\" onClick={props.resetGame}>newGame</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameOverOverlay;","import Directions from './Directions';\r\n\r\nconst getReverseDirection= (direction) =>{\r\n\r\n    switch(direction){\r\n\r\n        case Directions.BOTTOM: return Directions.TOP;\r\n        case Directions.TOP: return Directions.BOTTOM;\r\n        case Directions.LEFT: return Directions.RIGHT;\r\n        case Directions.RIGHT: return Directions.LEFT;\r\n        default : return null;\r\n    }\r\n}\r\n\r\n\r\nexport default getReverseDirection;","import Directions from '../Directions/Directions';\r\nimport Element from '../Element/Element';\r\nimport getReverseDirection from './../Directions/getReverseDirections';\r\n\r\nclass Snake {\r\n    constructor(direction, elements,eats ){\r\n        this.direction = direction;\r\n        this.elements = elements;\r\n        this.eats = eats;\r\n        \r\n\r\n    }\r\n    addTailElement(el){\r\n        this.elements = [...this.elements, el]\r\n    }\r\n\r\n    eatElement(element){\r\n        this.elements = [element, ...this.elements];\r\n    }\r\n    getElements(){\r\n        this.elements.map(el => el);\r\n    }\r\n\r\n    getTail(){\r\n        return this.elements[this.elements.length-1];\r\n    }\r\n\r\n    getHeadPosition(){\r\n        return this.elements[0];\r\n    }\r\n    getLength(){\r\n        return this.elements.length;\r\n    }\r\n\r\n    move(){\r\n        switch(this.direction){\r\n            default: return;\r\n            case Directions.RIGHT: {\r\n                \r\n                const newX = this.elements[0].x +1;\r\n                const newY = this.elements[0].y;\r\n                const newElement = new Element(newX, newY);\r\n                this.elements.pop();\r\n                this.elements.unshift(newElement);\r\n                break;\r\n            }\r\n            case Directions.LEFT:\r\n                {\r\n                const newElement = new Element(this.elements[0].x -1, this.elements[0].y);\r\n                this.elements.pop();\r\n                this.elements.unshift(newElement);\r\n                break;\r\n                }\r\n            case Directions.TOP:\r\n                {\r\n                const newElement = new Element(this.elements[0].x, this.elements[0].y -1);\r\n                this.elements.pop();\r\n                this.elements.unshift(newElement);\r\n                break;\r\n                }\r\n            case Directions.BOTTOM:\r\n                {\r\n                const newElement = new Element(this.elements[0].x, this.elements[0].y +1);\r\n                this.elements.pop();\r\n                this.elements.unshift(newElement);\r\n                break;\r\n                }\r\n        }\r\n    }\r\n\r\n    mirrorMove(width, height){\r\n        switch(this.direction){\r\n\r\n            default: return;\r\n            case Directions.LEFT: \r\n                {\r\n                const newX = width -1;\r\n                const newY = this.elements[0].y;\r\n                const newElement = new Element(newX, newY);\r\n                this.elements.pop();\r\n                this.elements.unshift(newElement);\r\n                break;\r\n                }\r\n            case Directions.RIGHT:\r\n                {\r\n                const newX = 0;\r\n                const newY = this.elements[0].y;\r\n                const newElement = new Element(newX, newY);\r\n                this.elements.pop();\r\n                this.elements.unshift(newElement);\r\n                break;\r\n                } \r\n            case Directions.TOP :\r\n                {\r\n                const newX = this.elements[0].x;\r\n                const newY = height-1;\r\n                const newElement = new Element(newX,newY);\r\n                this.elements.pop();\r\n                this.elements.unshift(newElement);\r\n                break;\r\n                }\r\n            case Directions.BOTTOM: \r\n                {\r\n                const newX = this.elements[0].x;\r\n                const newY = 0;\r\n                const newElement = new Element(newX,newY);\r\n                this.elements.pop();\r\n                this.elements.unshift(newElement);\r\n                break;\r\n                }\r\n\r\n        }\r\n\r\n    }\r\n    setEats(boolValue){\r\n        this.eats = boolValue;\r\n    }\r\n    setDirection(newDirection){\r\n        if(newDirection === getReverseDirection(this.direction)){\r\n            return;\r\n        }else{\r\n            this.direction = newDirection;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Snake;","function throttle (func, limit) {\r\n    let lastFunc\r\n    let lastRan\r\n   \r\n    return function() {\r\n      const context = this\r\n      const args = arguments\r\n      \r\n      if (!lastRan) {\r\n    \r\n        func.apply(context, args)\r\n        lastRan = Date.now()\r\n      } else {\r\n        clearTimeout(lastFunc)\r\n        lastFunc = setTimeout(function() {\r\n          if ((Date.now() - lastRan) >= limit) {\r\n            func.apply(context, args)\r\n            lastRan = Date.now()\r\n          }\r\n        }, limit - (Date.now() - lastRan))\r\n      }\r\n    }\r\n  }\r\n\r\n  export default throttle;","import React, {useState, useEffect} from 'react';\r\nimport Directions from './Directions/Directions';\r\nimport Element from './Element/Element';\r\nimport Field from './Field/Field'\r\nimport GameOverOverlay from './GameOverOverlay/GameOverOverlay';\r\nimport Snake from './Snake/Snake';\r\nimport TwitterIcon from '@material-ui/icons/Twitter';\r\n\r\n\r\nimport throttle from '../General/throttle';\r\n\r\n\r\n\r\nconst speedLevels = [150,100,50];\r\nfunction Game(props){   \r\n    const [addElements, setAddElements] = useState([]);\r\n    const [newElement, setNewElement] = useState(new Element(2,2));\r\n    const [playGround, setplayGround] = useState(new Field(20,20));\r\n    const [gameOver, setGameOver] = useState(false);\r\n    const [round,setRound] = useState(0);\r\n    const [score, setScore] = useState(0);\r\n    const [snake, setSnake] = useState(new Snake(Directions.RIGHT, [new Element(5,5), new Element(4,5) ], false ))\r\n   \r\n    const fields =[...Array(playGround.getWidth() * playGround.getHeight())];\r\n\r\n    \r\n\r\n    const gameContainerClass = props.mirroring ? \"gameContainer mirrorWall\" : \"gameContainer solidWall\";\r\n    function checkAndAddTailElement(){\r\n        if(addElements.length > 0 && addElements[0].x === snake.getTail().x && addElements[0].y === snake.getTail().y)\r\n            {\r\n                \r\n                snake.addTailElement(addElements[0]);\r\n               \r\n                addElements.shift();\r\n                if(addElements.length === 0){\r\n                    snake.setEats(false);\r\n                }\r\n            }\r\n    }\r\n    function checkAndChangeSnakeDirection(){\r\n        if(newDirection){\r\n            snake.setDirection(newDirection);\r\n        }\r\n    }\r\n\r\n    function checkAndEatElement(){\r\n        if(snake.getHeadPosition().x === newElement.x &&\r\n        snake.getHeadPosition().y === newElement.y)\r\n        {\r\n            snake.setEats(true);\r\n                \r\n            addElements.push(newElement)\r\n            createNewElement(playGround.getHeight() * playGround.getWidth());\r\n               \r\n            \r\n            setScore(score +1);\r\n        }\r\n    }\r\n    function checkMoveOrSetGameOver(){\r\n        \r\n        if(isInSnakeElements(snake.getHeadPosition().x + (snake.getHeadPosition().y * playGround.getHeight() ), false))\r\n                 {\r\n                    console.log(\"hit snake\")\r\n                    setGameOver(true);\r\n        }else if(   \r\n                (snake.elements[0].x === 0 && snake.direction === Directions.LEFT) || \r\n                (snake.elements[0].x ===  playGround.getWidth() -1 && snake.direction === Directions.RIGHT) || \r\n                (snake.elements[0].y === 0 && snake.direction === Directions.TOP) ||\r\n                (snake.elements[0].y === playGround.getHeight()-1 && snake.direction === Directions.BOTTOM))\r\n                {\r\n                if(props.mirroring){\r\n                    snake.mirrorMove(playGround.getWidth(), playGround.getHeight());\r\n                }else{\r\n                    setGameOver(true);\r\n                }\r\n        }else{             \r\n            snake.move();\r\n        }\r\n    }\r\n\r\n    function createNewElement(size){\r\n        let i = 0;\r\n        let possibleFieldIndizes = [];\r\n        \r\n        for(i; i < size; i++){\r\n            if(isInSnakeElements(i,true) === false){\r\n                possibleFieldIndizes.push(i);\r\n            }\r\n        }\r\n\r\n        let newFieldIndex = possibleFieldIndizes[Math.floor(Math.random()*possibleFieldIndizes.length)];\r\n        let newElement = new Element(newFieldIndex % playGround.getWidth(), Math.floor(newFieldIndex / playGround.getHeight()) )\r\n        setNewElement(newElement);\r\n       \r\n    }\r\n    \r\n\r\n    function isInNewElement(index){\r\n        if(newElement.x === index % playGround.getWidth() && newElement.y === Math.floor(index/playGround.getHeight()))\r\n        {\r\n            return true;\r\n        }else \r\n        {\r\n            return false;\r\n        }\r\n    }\r\n    function isInSnakeElements( index, headIncluded){\r\n\r\n        if(headIncluded)\r\n        {\r\n            let indexInElements = false;\r\n            snake.elements.forEach((el)=> {\r\n          \r\n            if(el.x === (index % playGround.getWidth()) && el.y === Math.floor(index/playGround.getHeight())){\r\n               indexInElements = true;\r\n            }\r\n        })\r\n        return indexInElements; \r\n        }\r\n        else\r\n        {\r\n            let indexInElements = false;\r\n            snake.elements.forEach((el,i)=> {\r\n          \r\n                if(i > 0 && el.x === (index % playGround.getWidth()) && el.y === Math.floor(index/playGround.getHeight()))\r\n                {\r\n                indexInElements = true;\r\n                }\r\n            })\r\n            return indexInElements; \r\n        }       \r\n    }\r\n\r\n    function getDirectionFromMarginClick(event,index){\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        console.log(\"clicked\")\r\n        const isTop = Math.floor(index / playGround.getHeight()) <= 3 ; \r\n        const isBottom =  Math.floor(index / playGround.getHeight()) >= 16 ;\r\n        const isLeft = (index % playGround.getWidth()) <= 3;\r\n        const isRight = (index % playGround.getWidth()) >= 16;\r\n        \r\n        if(isTop && !isLeft && !isRight ){\r\n            console.log(\"top\")\r\n            newDirection = Directions.TOP;\r\n        }\r\n        if(isBottom && !isLeft && !isRight ){\r\n            newDirection = Directions.BOTTOM;\r\n        }\r\n\r\n        if(isRight && !isBottom && !isTop){\r\n            newDirection = Directions.RIGHT;\r\n        }\r\n        if(isLeft && !isBottom && !isTop){\r\n            newDirection = Directions.LEFT;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function isSnakeHead(index){\r\n        const head = snake.elements[0];\r\n        if(index % playGround.getWidth() === head.x && Math.floor(index/playGround.getHeight()) === head.y){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n    function onKeyPressed(e){\r\n        if(!newDirection)\r\n        {\r\n            switch(e.key)\r\n            {\r\n                default: return;\r\n                case \"w\":\r\n                case \"W\":\r\n                case \"ArrowUp\": newDirection = Directions.TOP;break;\r\n                case \"s\":\r\n                case \"S\":\r\n                case \"ArrowDown\": newDirection = Directions.BOTTOM; break;\r\n                case \"d\":\r\n                case \"D\":\r\n                case \"ArrowRight\": newDirection = Directions.RIGHT; break;\r\n                case \"a\":\r\n                case \"A\":\r\n                case \"ArrowLeft\" : newDirection = Directions.LEFT; break;\r\n            }\r\n        }\r\n    }\r\n    function resetGame(){\r\n        setScore(0);\r\n        setGameOver(false);\r\n        createNewElement(playGround.getWidth()* playGround.getHeight());\r\n        setSnake(new Snake(Directions.RIGHT, [new Element(5,5), new Element(4,5) ], false ));\r\n        setAddElements([]);\r\n        setRound(0);\r\n    }\r\n   \r\n    var newDirection = null;\r\n          \r\n    const throttledKeyDown = (e) => throttle(onKeyPressed(e),500);\r\n    document.addEventListener(\"keydown\", (e)=> throttledKeyDown(e));  \r\n\r\n    \r\n    useEffect(()=> {\r\n        \r\n        if(!gameOver)\r\n        {   \r\n           \r\n            var myTimeout = setTimeout(()=> {\r\n                \r\n                checkAndChangeSnakeDirection()\r\n                checkAndAddTailElement();\r\n                checkAndEatElement();\r\n                checkMoveOrSetGameOver();\r\n                setRound(round+1);\r\n            },speedLevels[props.difficulty-1])\r\n           \r\n           \r\n        }\r\n        return () => {\r\n            clearTimeout(myTimeout)\r\n\r\n             document.removeEventListener(\"keydown\", (e)=>throttledKeyDown(e)) \r\n        }\r\n       \r\n    }, [round])\r\n\r\n\r\n\r\n    \r\n    return(<>\r\n            <div className=\"centerContainer\">\r\n                <div className=\"scoreContainer\">\r\n                Score: {score}\r\n                </div>\r\n                <div className={gameContainerClass}>\r\n                    {gameOver \r\n                    ?\r\n                    <GameOverOverlay \r\n                        setShowSettings = {props.setShowSettings}\r\n                        score={score}\r\n                        resetGame = {resetGame}/>\r\n                    :\r\n                    ''\r\n                    }\r\n                    {fields.map((field,index)=>{\r\n                        if(isSnakeHead(index)){\r\n                            return(<div key={index}\r\n                                        id=\"snakeHead\" \r\n                                        onClick={event => getDirectionFromMarginClick(event,index)}></div>)\r\n                        }else if(isInSnakeElements(index,false)){\r\n\r\n                            if(snake.getLength() <30){\r\n                                return(<div \r\n                                        key={index} \r\n                                        className=\"shortSnakeField\"  \r\n                                        onClick={event => getDirectionFromMarginClick(event,index)}><span>+</span></div>)\r\n                            }else if(snake.getLength() < 50){\r\n                                return(<div \r\n                                            key={index} \r\n                                            className=\"middleSnakeField\"\r\n                                            onClick={event => getDirectionFromMarginClick(event,index)}>O</div>)\r\n                            }else{\r\n                                return(<div \r\n                                            key={index} \r\n                                            className=\"longSnakeField\"\r\n                                            onClick={event => getDirectionFromMarginClick(event,index)}>X</div>)\r\n                            }\r\n                           \r\n                        }else if(isInNewElement(index)){\r\n\r\n                            return(<div \r\n                                        key={index} \r\n                                        className=\"elementField\"\r\n                                        onClick={event => getDirectionFromMarginClick(event,index)}>\r\n                                        <TwitterIcon />\r\n                                    </div>)\r\n\r\n                        }else{\r\n\r\n                            return(<div \r\n                                        key={index} \r\n                                        className=\"field\"\r\n                                        onClick={event => getDirectionFromMarginClick(event,index)}></div>)\r\n                            \r\n                        }\r\n                    })}\r\n                </div>\r\n            </div>\r\n    </>)\r\n}\r\n\r\n\r\nexport default Game;","import './App.scss';\nimport React, {useState, useEffect} from 'react';\nimport Settings from './Settings/Settings';\nimport Game from './Game/Game';\nimport diff from '../node_modules/jest-diff';\nfunction App() {\n  const [showSettings, setShowSettings] = useState(true);\n  const [difficulty, setDifficulty] = useState(1);\n  const [mirroring, setMirroring] = useState(false)\n\n  console.log(mirroring)\n  return (\n    <div id=\"mainContainer\" > \n      \n        {\n        showSettings \n        ? \n        <Settings \n            difficulty={difficulty}\n            setDifficulty = {setDifficulty}\n            mirroring={mirroring}\n            setMirroring = {setMirroring}\n            setShowSettings = {setShowSettings}/>\n        :\n        <Game \n          difficulty = {difficulty}\n          mirroring = {mirroring}\n          setShowSettings = {setShowSettings}\n        \n        />\n          }\n    \n    </div>\n   \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}