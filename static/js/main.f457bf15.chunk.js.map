{"version":3,"sources":["Settings/Settings.js","Game/GameOverOverlay/GameOverOverlay.js","Game/Snake/Directions.js","Game/Snake/Element.js","Game/Snake/getReverseDirections.js","Game/Snake/Snake.js","Game/Game.js","App.js","reportWebVitals.js","index.js"],"names":["difficulties","Settings","props","useState","difficulty","modelDifficulty","setModelDifficulty","mirroring","modelMirroring","setModelMirroring","id","onSubmit","e","stopPropagation","setDifficulty","setMirroring","setShowSettings","className","value","onChange","target","map","dif","index","stringBoolean","setBooleanModelMirroring","type","GameOverOverlay","score","onClick","resetGame","Directions","Object","freeze","LEFT","RIGHT","TOP","BOTTOM","Element","x","y","this","getReverseDirection","direction","Snake","elements","eats","el","element","length","newX","newY","newElement","pop","unshift","width","height","boolValue","newDirection","speedLevels","Game","gameOver","setGameOver","round","setRound","setScore","snake","setSnake","setNewElement","addElements","setAddElements","fieldWidth","fieldHeight","fields","Array","createNewElement","size","i","possibleFieldIndizes","isInSnakeElements","push","newFieldIndex","Math","floor","random","headIncluded","indexInElements","forEach","onKeyPressed","key","console","log","document","addEventListener","fn","delay","timer","self","args","arguments","clearTimeout","setTimeout","apply","debounce","useEffect","myTimeout","setDirection","getTail","addTailElement","shift","setEats","getHeadPosition","mirrorMove","move","removeEventListener","isInNewElement","App","showSettings","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f457bf15.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport ArrowBack from '@material-ui/icons/ArrowBack';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport ArrowForward from '@material-ui/icons/ArrowForward';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\n\r\n\r\nconst difficulties =[1,2,3]\r\n\r\nfunction Settings(props){\r\n    const [modelDifficulty, setModelDifficulty] = useState(props.difficulty);\r\n    const [modelMirroring, setModelMirroring] = useState(props.mirroring);\r\n\r\n\r\n    function setBooleanModelMirroring(stringBoolean){\r\n        switch(stringBoolean)\r\n        {\r\n            default:\r\n                    setModelMirroring(false);\r\n                    break;\r\n            case \"true\":\r\n                    setModelMirroring(true);\r\n                    break;\r\n            case \"false\":\r\n                    setModelMirroring(false)\r\n        }\r\n    }\r\n\r\n    function setNumberModelDifficulty(stringNumber)\r\n    {\r\n        setModelDifficulty(parseInt(stringNumber))\r\n\r\n    }\r\n    function submitFunction(event){\r\n        event.stopPropagation();\r\n        props.setDifficulty(modelDifficulty);\r\n        props.setMirroring(modelMirroring);\r\n        props.setShowSettings(false);\r\n\r\n    }\r\n\r\n    return(\r\n        <div id=\"SettingsOverlay\">\r\n            <div id=\"SettingsMain\">\r\n                <div id=\"SettingsHeader\">Settings</div>\r\n                <form id=\"SettingsForm\" onSubmit={e=> submitFunction(e)}>\r\n\r\n\r\n                        <div className=\"settingPart\">\r\n                            <div className=\"settingPartDescription\">Navigation</div>\r\n                            <div className=\"arrowContainer\">\r\n                                <ArrowUpward />\r\n                            </div>\r\n                            <div className=\"arrowContainer\">\r\n                                <ArrowBack />\r\n                                <ArrowDownward />\r\n                                <ArrowForward />\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                        <div className=\"settingPart\">\r\n                            <div className=\"settingPartDescription\">Difficulty</div>\r\n                            <div className=\"\">\r\n                                <select  value={modelDifficulty} onChange={(e) => setModelDifficulty(e.target.value)}>\r\n                                    {difficulties.map((dif,index) => {\r\n                                        return <option key = {index} value={dif}>{dif}</option>\r\n                                    })\r\n                                    }\r\n                                </select>\r\n\r\n\r\n\r\n\r\n                            </div>\r\n                        </div>\r\n                    \r\n                        <div className=\"settingPart\">\r\n                            <div className=\"settingPartDescription\">Wall mirroring</div>\r\n                            <div className=\"\">\r\n                                <select value={modelMirroring} onChange={(e) => setBooleanModelMirroring(e.target.value)}>\r\n                                    <option key={1} value ={false}>false</option>\r\n                                    <option key={2} value = {true}>true</option>\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"settingPart\">\r\n                            <button type=\"submit\">Ok</button>\r\n                        </div>\r\n                    \r\n                </form>\r\n            \r\n            \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings;","import React from 'react';\r\n\r\n\r\nfunction GameOverOverlay(props){\r\n\r\n\r\n    return(\r\n        <div id=\"gameOverOverlay\">\r\n            <div id=\"gameOverOverlayCenter\">\r\n                <span id=\"gameOverText\">GameOver</span>\r\n                <span id=\"scoreText\">Your score is: {props.score}</span>\r\n                <button id=\"settingsButton\" onClick = {props.setShowSettings}>Settings</button>\r\n                <button id=\"newGameButton\" onClick={props.resetGame}>newGame</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameOverOverlay;","const Directions = Object.freeze({\r\n    LEFT:\"LEFT\",\r\n    RIGHT:\"RIGHT\",\r\n    TOP:\"TOP\",\r\n    BOTTOM:\"BOTTOM\"\r\n});\r\n\r\nexport default Directions;","class Element{\r\n    constructor(x,y){\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\n\r\nexport default Element;","import Directions from './Directions';\r\n\r\nconst getReverseDirection= (direction) =>{\r\n\r\n    switch(direction){\r\n\r\n        case Directions.BOTTOM: return Directions.TOP;\r\n        case Directions.TOP: return Directions.BOTTOM;\r\n        case Directions.LEFT: return Directions.RIGHT;\r\n        case Directions.RIGHT: return Directions.LEFT;\r\n        default : return null;\r\n    }\r\n}\r\n\r\n\r\nexport default getReverseDirection;","import Directions from './Directions';\r\nimport Element from './Element';\r\nimport getReverseDirection from './getReverseDirections';\r\n\r\nclass Snake {\r\n    constructor(direction, elements,eats ){\r\n        this.direction = direction;\r\n        this.elements = elements;\r\n        this.eats = eats;\r\n        \r\n\r\n    }\r\n    addTailElement(el){\r\n        this.elements = [...this.elements, el]\r\n    }\r\n\r\n    eatElement(element){\r\n        this.elements = [element, ...this.elements];\r\n    }\r\n    getElements(){\r\n        this.elements.map(el => el);\r\n    }\r\n\r\n    getTail(){\r\n        return this.elements[this.elements.length-1];\r\n    }\r\n\r\n    getHeadPosition(){\r\n        return this.elements[0];\r\n    }\r\n\r\n    move(){\r\n        switch(this.direction){\r\n            default: return;\r\n            case Directions.RIGHT: {\r\n                \r\n                const newX = this.elements[0].x +1;\r\n                const newY = this.elements[0].y;\r\n                const newElement = new Element(newX, newY);\r\n                this.elements.pop();\r\n                this.elements.unshift(newElement);\r\n                break;\r\n            }\r\n            case Directions.LEFT:\r\n                {\r\n                const newElement = new Element(this.elements[0].x -1, this.elements[0].y);\r\n                this.elements.pop();\r\n                this.elements.unshift(newElement);\r\n                break;\r\n                }\r\n            case Directions.TOP:\r\n                {\r\n                const newElement = new Element(this.elements[0].x, this.elements[0].y -1);\r\n                this.elements.pop();\r\n                this.elements.unshift(newElement);\r\n                break;\r\n                }\r\n            case Directions.BOTTOM:\r\n                {\r\n                const newElement = new Element(this.elements[0].x, this.elements[0].y +1);\r\n                this.elements.pop();\r\n                this.elements.unshift(newElement);\r\n                break;\r\n                }\r\n        }\r\n    }\r\n\r\n    mirrorMove(width, height){\r\n        switch(this.direction){\r\n\r\n            default: return;\r\n            case Directions.LEFT: \r\n                {\r\n                const newX = width -1;\r\n                const newY = this.elements[0].y;\r\n                const newElement = new Element(newX, newY);\r\n                this.elements.pop();\r\n                this.elements.unshift(newElement);\r\n                break;\r\n                }\r\n            case Directions.RIGHT:\r\n                {\r\n                const newX = 0;\r\n                const newY = this.elements[0].y;\r\n                const newElement = new Element(newX, newY);\r\n                this.elements.pop();\r\n                this.elements.unshift(newElement);\r\n                break;\r\n                } \r\n            case Directions.TOP :\r\n                {\r\n                const newX = this.elements[0].x;\r\n                const newY = height-1;\r\n                const newElement = new Element(newX,newY);\r\n                this.elements.pop();\r\n                this.elements.unshift(newElement);\r\n                break;\r\n                }\r\n            case Directions.BOTTOM: \r\n                {\r\n                const newX = this.elements[0].x;\r\n                const newY = 0;\r\n                const newElement = new Element(newX,newY);\r\n                this.elements.pop();\r\n                this.elements.unshift(newElement);\r\n                break;\r\n                }\r\n\r\n        }\r\n\r\n    }\r\n    setEats(boolValue){\r\n        this.eats = boolValue;\r\n    }\r\n    setDirection(newDirection){\r\n        if(newDirection === getReverseDirection(this.direction)){\r\n            return;\r\n        }else{\r\n            this.direction = newDirection;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Snake;","import React, {useState, useEffect} from 'react';\r\nimport GameOverOverlay from './GameOverOverlay/GameOverOverlay';\r\nimport Snake from './Snake/Snake';\r\nimport Element from './Snake/Element';\r\nimport Directions from './Snake/Directions';\r\nimport { Dir } from 'fs';\r\n\r\n\r\n\r\nconst speedLevels = [150,100,50];\r\nfunction Game(props){   \r\n    \r\n    const [gameOver, setGameOver] = useState(false);\r\n    const [round,setRound] = useState(0);\r\n    const [score, setScore] = useState(0);\r\n    const [snake, setSnake] = useState(new Snake(Directions.RIGHT, [new Element(5,5), new Element(4,5) ], false ))\r\n    const [newElement, setNewElement] = useState(new Element(2,2));\r\n    const [addElements, setAddElements] = useState([]);\r\n    const fieldWidth = 20;\r\n    const fieldHeight = 20;\r\n    const fields =[...Array(fieldWidth * fieldHeight)];\r\n\r\n    console.log(props.mirroring)\r\n\r\n    \r\n    function createNewElement(size){\r\n        let i = 0;\r\n        let possibleFieldIndizes = [];\r\n        \r\n        for(i; i < size; i++){\r\n            if(isInSnakeElements(i,true) === false){\r\n                possibleFieldIndizes.push(i);\r\n            }\r\n        }\r\n\r\n        let newFieldIndex = possibleFieldIndizes[Math.floor(Math.random()*possibleFieldIndizes.length)];\r\n        let newElement = new Element(newFieldIndex % fieldWidth, Math.floor(newFieldIndex / fieldHeight) )\r\n        setNewElement(newElement);\r\n       \r\n    }\r\n\r\n    function isInNewElement(index){\r\n        let indexInElements = false;\r\n        if(newElement.x === index % fieldWidth && newElement.y === Math.floor(index/fieldHeight))\r\n        {\r\n            return true;\r\n        }else \r\n        {\r\n            return false;\r\n        }\r\n    }\r\n    function isInSnakeElements( index, headIncluded){\r\n\r\n        if(headIncluded)\r\n        {\r\n            let indexInElements = false;\r\n            snake.elements.forEach((el)=> {\r\n          \r\n            if(el.x === (index % fieldWidth) && el.y === Math.floor(index/fieldHeight)){\r\n               indexInElements = true;\r\n            }\r\n        })\r\n        return indexInElements; \r\n        }\r\n        else\r\n        {\r\n            let indexInElements = false;\r\n            snake.elements.forEach((el,i)=> {\r\n          \r\n                if(i > 0 && el.x === (index % fieldWidth) && el.y === Math.floor(index/fieldHeight))\r\n                {\r\n                indexInElements = true;\r\n                }\r\n            })\r\n            return indexInElements; \r\n        }       \r\n    }\r\n    function onKeyPressed(e){\r\n        if(!newDirection)\r\n        \r\n        {\r\n            switch(e.key)\r\n            {\r\n                default: return;\r\n                case \"ArrowUp\": newDirection = Directions.TOP;break;\r\n                case \"ArrowDown\": newDirection = Directions.BOTTOM; break;\r\n                case \"ArrowRight\": newDirection = Directions.RIGHT; break;\r\n                case \"ArrowLeft\" : newDirection = Directions.LEFT; break;\r\n            }\r\n        }\r\n    }\r\n    function resetGame(){\r\n        setScore(0);\r\n        setGameOver(false);\r\n        createNewElement(fieldWidth* fieldHeight);\r\n        setSnake(new Snake(Directions.RIGHT, [new Element(5,5), new Element(4,5) ], false ));\r\n        setAddElements([]);\r\n        setRound(0);\r\n    }\r\n    function debounce(fn, delay) {  \r\n        var timer = null;  \r\n        return function() {  \r\n          var self = this,  \r\n              args = arguments;  \r\n          clearTimeout(timer);  \r\n          timer = setTimeout(function() {  \r\n            fn.apply(self, args);  \r\n          }, delay);  \r\n        };  \r\n      }\r\n    var newDirection = null;\r\n          \r\n\r\n    document.addEventListener(\"keydown\", (e)=> debounce(onKeyPressed(e),10));  \r\n\r\n    \r\n    useEffect(()=> {\r\n        \r\n        function checkAndEatElement(){\r\n            if(snake.getHeadPosition().x === newElement.x &&\r\n            snake.getHeadPosition().y === newElement.y)\r\n            {\r\n                snake.setEats(true);\r\n                    \r\n                addElements.push(newElement)\r\n                createNewElement(fieldHeight * fieldWidth);\r\n                   \r\n                \r\n                setScore(score +1);\r\n            }\r\n        }\r\n\r\n   \r\n        function checkAndAddTailElement(){\r\n            if(addElements.length > 0 && addElements[0].x === snake.getTail().x && addElements[0].y === snake.getTail().y)\r\n                {\r\n                    \r\n                    snake.addTailElement(addElements[0]);\r\n                   \r\n                    addElements.shift();\r\n                    if(addElements.length === 0){\r\n                        snake.setEats(false);\r\n                    }\r\n                }\r\n        }\r\n\r\n        function checkAndChangeSnakeDirection(){\r\n            if(newDirection){\r\n                snake.setDirection(newDirection);\r\n            }\r\n        }\r\n\r\n        function checkMoveOrSetGameOver(){\r\n            console.log(props.mirroring)\r\n            if(isInSnakeElements(snake.getHeadPosition().x + (snake.getHeadPosition().y * fieldHeight ), false))\r\n                     {\r\n                        console.log(\"hit snake\")\r\n                        setGameOver(true);\r\n            }else if(   \r\n                    (snake.elements[0].x === 0 && snake.direction === Directions.LEFT) || \r\n                    (snake.elements[0].x ===  fieldWidth -1 && snake.direction === Directions.RIGHT) || \r\n                    (snake.elements[0].y === 0 && snake.direction === Directions.TOP) ||\r\n                    (snake.elements[0].y === fieldHeight-1 && snake.direction === Directions.BOTTOM))\r\n                    {\r\n                    if(props.mirroring){\r\n                        snake.mirrorMove(fieldWidth, fieldHeight);\r\n                    }else{\r\n                        setGameOver(true);\r\n                    }\r\n            }else{             \r\n                snake.move();\r\n            }\r\n        }\r\n\r\n        if(!gameOver)\r\n        {   \r\n           \r\n            var myTimeout = setTimeout(()=> {\r\n                \r\n                checkAndChangeSnakeDirection()\r\n                checkAndAddTailElement();\r\n                checkAndEatElement();\r\n                checkMoveOrSetGameOver();\r\n                setRound(round+1);\r\n            },speedLevels[props.difficulty-1])\r\n           \r\n           \r\n        }\r\n        return () => {\r\n            clearTimeout(myTimeout)\r\n\r\n             document.removeEventListener(\"keydown\", (e)=> onKeyPressed(e)) \r\n        }\r\n       \r\n    }, [round])\r\n\r\n\r\n\r\n    \r\n    return(<>\r\n            <div className=\"centerContainer\">\r\n                <div className=\"scoreContainer\">\r\n                Score: {score}\r\n                </div>\r\n                <div className=\"gameContainer\">\r\n                    {gameOver \r\n                    ?\r\n                    <GameOverOverlay \r\n                        setShowSettings = {props.setShowSettings}\r\n                        score={score}\r\n                        resetGame = {resetGame}/>\r\n                    :\r\n                    ''\r\n                    }\r\n                    {fields.map((fields,index)=>{\r\n                        if(isInSnakeElements(index,true)){\r\n                            return(<div key={index} className=\"snakeField\"></div>)\r\n\r\n                        }else if(isInNewElement(index)){\r\n\r\n                            return(<div key={index} className=\"elementField\"></div>)\r\n\r\n                        }else{\r\n\r\n                            return(<div key={index} className=\"field\"></div>)\r\n                            \r\n                        }\r\n                    })}\r\n                </div>\r\n            </div>\r\n    </>)\r\n}\r\n\r\n\r\nexport default Game;","import './App.scss';\nimport React, {useState, useEffect} from 'react';\nimport Settings from './Settings/Settings';\nimport Game from './Game/Game';\nimport diff from '../node_modules/jest-diff';\nfunction App() {\n  const [showSettings, setShowSettings] = useState(true);\n  const [difficulty, setDifficulty] = useState(1);\n  const [mirroring, setMirroring] = useState(false)\n\n  console.log(mirroring)\n  return (\n    <div id=\"mainContainer\" > \n      \n        {\n        showSettings \n        ? \n        <Settings \n            difficulty={difficulty}\n            setDifficulty = {setDifficulty}\n            mirroring={mirroring}\n            setMirroring = {setMirroring}\n            setShowSettings = {setShowSettings}/>\n        :\n        <Game \n          difficulty = {difficulty}\n          mirroring = {mirroring}\n          setShowSettings = {setShowSettings}\n        \n        />\n          }\n    \n    </div>\n   \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}