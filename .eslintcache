[{"C:\\Users\\merli\\Documents\\Snake\\snake\\src\\index.js":"1","C:\\Users\\merli\\Documents\\Snake\\snake\\src\\reportWebVitals.js":"2","C:\\Users\\merli\\Documents\\Snake\\snake\\src\\App.js":"3","C:\\Users\\merli\\Documents\\Snake\\snake\\src\\Settings\\Settings.js":"4","C:\\Users\\merli\\Documents\\Snake\\snake\\src\\Game\\Game.js":"5","C:\\Users\\merli\\Documents\\Snake\\snake\\src\\Game\\Snake\\Element.js":"6","C:\\Users\\merli\\Documents\\Snake\\snake\\src\\Game\\GameOverOverlay\\GameOverOverlay.js":"7","C:\\Users\\merli\\Documents\\Snake\\snake\\src\\Game\\Snake\\Snake.js":"8","C:\\Users\\merli\\Documents\\Snake\\snake\\src\\Game\\Snake\\Directions.js":"9","C:\\Users\\merli\\Documents\\Snake\\snake\\src\\Game\\Snake\\getReverseDirections.js":"10"},{"size":500,"mtime":499162500000,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":935,"mtime":1609543990250,"results":"14","hashOfConfig":"12"},{"size":3602,"mtime":1609585068747,"results":"15","hashOfConfig":"12"},{"size":7647,"mtime":1609584142590,"results":"16","hashOfConfig":"12"},{"size":116,"mtime":1609365799405,"results":"17","hashOfConfig":"12"},{"size":559,"mtime":1609538214830,"results":"18","hashOfConfig":"12"},{"size":3729,"mtime":1609515069674,"results":"19","hashOfConfig":"12"},{"size":144,"mtime":1609360204524,"results":"20","hashOfConfig":"12"},{"size":419,"mtime":1609365440662,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"ebgtwm",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\merli\\Documents\\Snake\\snake\\src\\index.js",[],["46","47"],"C:\\Users\\merli\\Documents\\Snake\\snake\\src\\reportWebVitals.js",[],"C:\\Users\\merli\\Documents\\Snake\\snake\\src\\App.js",["48","49"],"import './App.scss';\nimport React, {useState, useEffect} from 'react';\nimport Settings from './Settings/Settings';\nimport Game from './Game/Game';\nimport diff from '../node_modules/jest-diff';\nfunction App() {\n  const [showSettings, setShowSettings] = useState(true);\n  const [difficulty, setDifficulty] = useState(1);\n  const [mirroring, setMirroring] = useState(false)\n\n  console.log(mirroring)\n  return (\n    <div id=\"mainContainer\" > \n      \n        {\n        showSettings \n        ? \n        <Settings \n            difficulty={difficulty}\n            setDifficulty = {setDifficulty}\n            mirroring={mirroring}\n            setMirroring = {setMirroring}\n            setShowSettings = {setShowSettings}/>\n        :\n        <Game \n          difficulty = {difficulty}\n          mirroring = {mirroring}\n          setShowSettings = {setShowSettings}\n        \n        />\n          }\n    \n    </div>\n   \n  );\n}\n\nexport default App;\n","C:\\Users\\merli\\Documents\\Snake\\snake\\src\\Settings\\Settings.js",["50"],"import React, {useState} from 'react';\r\nimport ArrowBack from '@material-ui/icons/ArrowBack';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport ArrowForward from '@material-ui/icons/ArrowForward';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\n\r\n\r\nconst difficulties =[1,2,3]\r\n\r\nfunction Settings(props){\r\n    const [modelDifficulty, setModelDifficulty] = useState(props.difficulty);\r\n    const [modelMirroring, setModelMirroring] = useState(props.mirroring);\r\n\r\n\r\n    function setBooleanModelMirroring(stringBoolean){\r\n        switch(stringBoolean)\r\n        {\r\n            default:\r\n                    setModelMirroring(false);\r\n                    break;\r\n            case \"true\":\r\n                    setModelMirroring(true);\r\n                    break;\r\n            case \"false\":\r\n                    setModelMirroring(false)\r\n        }\r\n    }\r\n\r\n    function setNumberModelDifficulty(stringNumber)\r\n    {\r\n        setModelDifficulty(parseInt(stringNumber))\r\n\r\n    }\r\n    function submitFunction(event){\r\n        event.stopPropagation();\r\n        props.setDifficulty(modelDifficulty);\r\n        props.setMirroring(modelMirroring);\r\n        props.setShowSettings(false);\r\n\r\n    }\r\n\r\n    return(\r\n        <div id=\"SettingsOverlay\">\r\n            <div id=\"SettingsMain\">\r\n                <div id=\"SettingsHeader\">Settings</div>\r\n                <form id=\"SettingsForm\" onSubmit={e=> submitFunction(e)}>\r\n\r\n\r\n                        <div className=\"settingPart\">\r\n                            <div className=\"settingPartDescription\">Navigation</div>\r\n                            <div className=\"arrowContainer\">\r\n                                <ArrowUpward />\r\n                            </div>\r\n                            <div className=\"arrowContainer\">\r\n                                <ArrowBack />\r\n                                <ArrowDownward />\r\n                                <ArrowForward />\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                        <div className=\"settingPart\">\r\n                            <div className=\"settingPartDescription\">Difficulty</div>\r\n                            <div className=\"\">\r\n                                <select  value={modelDifficulty} onChange={(e) => setModelDifficulty(e.target.value)}>\r\n                                    {difficulties.map((dif,index) => {\r\n                                        return <option key = {index} value={dif}>{dif}</option>\r\n                                    })\r\n                                    }\r\n                                </select>\r\n\r\n\r\n\r\n\r\n                            </div>\r\n                        </div>\r\n                    \r\n                        <div className=\"settingPart\">\r\n                            <div className=\"settingPartDescription\">Wall mirroring</div>\r\n                            <div className=\"\">\r\n                                <select value={modelMirroring} onChange={(e) => setBooleanModelMirroring(e.target.value)}>\r\n                                    <option key={1} value ={false}>false</option>\r\n                                    <option key={2} value = {true}>true</option>\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"settingPart\">\r\n                            <button type=\"submit\">Ok</button>\r\n                        </div>\r\n                    \r\n                </form>\r\n            \r\n            \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings;","C:\\Users\\merli\\Documents\\Snake\\snake\\src\\Game\\Game.js",["51","52","53"],"import React, {useState, useEffect} from 'react';\r\nimport GameOverOverlay from './GameOverOverlay/GameOverOverlay';\r\nimport Snake from './Snake/Snake';\r\nimport Element from './Snake/Element';\r\nimport Directions from './Snake/Directions';\r\nimport { Dir } from 'fs';\r\n\r\n\r\n\r\nconst speedLevels = [150,100,50];\r\nfunction Game(props){   \r\n    \r\n    const [gameOver, setGameOver] = useState(false);\r\n    const [round,setRound] = useState(0);\r\n    const [score, setScore] = useState(0);\r\n    const [snake, setSnake] = useState(new Snake(Directions.RIGHT, [new Element(5,5), new Element(4,5) ], false ))\r\n    const [newElement, setNewElement] = useState(new Element(2,2));\r\n    const [addElements, setAddElements] = useState([]);\r\n    const fieldWidth = 20;\r\n    const fieldHeight = 20;\r\n    const fields =[...Array(fieldWidth * fieldHeight)];\r\n\r\n    console.log(props.mirroring)\r\n\r\n    \r\n    function createNewElement(size){\r\n        let i = 0;\r\n        let possibleFieldIndizes = [];\r\n        \r\n        for(i; i < size; i++){\r\n            if(isInSnakeElements(i,true) === false){\r\n                possibleFieldIndizes.push(i);\r\n            }\r\n        }\r\n\r\n        let newFieldIndex = possibleFieldIndizes[Math.floor(Math.random()*possibleFieldIndizes.length)];\r\n        let newElement = new Element(newFieldIndex % fieldWidth, Math.floor(newFieldIndex / fieldHeight) )\r\n        setNewElement(newElement);\r\n       \r\n    }\r\n\r\n    function isInNewElement(index){\r\n        let indexInElements = false;\r\n        if(newElement.x === index % fieldWidth && newElement.y === Math.floor(index/fieldHeight))\r\n        {\r\n            return true;\r\n        }else \r\n        {\r\n            return false;\r\n        }\r\n    }\r\n    function isInSnakeElements( index, headIncluded){\r\n\r\n        if(headIncluded)\r\n        {\r\n            let indexInElements = false;\r\n            snake.elements.forEach((el)=> {\r\n          \r\n            if(el.x === (index % fieldWidth) && el.y === Math.floor(index/fieldHeight)){\r\n               indexInElements = true;\r\n            }\r\n        })\r\n        return indexInElements; \r\n        }\r\n        else\r\n        {\r\n            let indexInElements = false;\r\n            snake.elements.forEach((el,i)=> {\r\n          \r\n                if(i > 0 && el.x === (index % fieldWidth) && el.y === Math.floor(index/fieldHeight))\r\n                {\r\n                indexInElements = true;\r\n                }\r\n            })\r\n            return indexInElements; \r\n        }       \r\n    }\r\n    function onKeyPressed(e){\r\n        if(!newDirection)\r\n        \r\n        {\r\n            switch(e.key)\r\n            {\r\n                default: return;\r\n                case \"ArrowUp\": newDirection = Directions.TOP;break;\r\n                case \"ArrowDown\": newDirection = Directions.BOTTOM; break;\r\n                case \"ArrowRight\": newDirection = Directions.RIGHT; break;\r\n                case \"ArrowLeft\" : newDirection = Directions.LEFT; break;\r\n            }\r\n        }\r\n    }\r\n    function resetGame(){\r\n        setScore(0);\r\n        setGameOver(false);\r\n        createNewElement(fieldWidth* fieldHeight);\r\n        setSnake(new Snake(Directions.RIGHT, [new Element(5,5), new Element(4,5) ], false ));\r\n        setAddElements([]);\r\n        setRound(0);\r\n    }\r\n    function debounce(fn, delay) {  \r\n        var timer = null;  \r\n        return function() {  \r\n          var self = this,  \r\n              args = arguments;  \r\n          clearTimeout(timer);  \r\n          timer = setTimeout(function() {  \r\n            fn.apply(self, args);  \r\n          }, delay);  \r\n        };  \r\n      }\r\n    var newDirection = null;\r\n          \r\n\r\n    document.addEventListener(\"keydown\", (e)=> debounce(onKeyPressed(e),10));  \r\n\r\n    \r\n    useEffect(()=> {\r\n        \r\n        function checkAndEatElement(){\r\n            if(snake.getHeadPosition().x === newElement.x &&\r\n            snake.getHeadPosition().y === newElement.y)\r\n            {\r\n                snake.setEats(true);\r\n                    \r\n                addElements.push(newElement)\r\n                createNewElement(fieldHeight * fieldWidth);\r\n                   \r\n                \r\n                setScore(score +1);\r\n            }\r\n        }\r\n\r\n   \r\n        function checkAndAddTailElement(){\r\n            if(addElements.length > 0 && addElements[0].x === snake.getTail().x && addElements[0].y === snake.getTail().y)\r\n                {\r\n                    \r\n                    snake.addTailElement(addElements[0]);\r\n                   \r\n                    addElements.shift();\r\n                    if(addElements.length === 0){\r\n                        snake.setEats(false);\r\n                    }\r\n                }\r\n        }\r\n\r\n        function checkAndChangeSnakeDirection(){\r\n            if(newDirection){\r\n                snake.setDirection(newDirection);\r\n            }\r\n        }\r\n\r\n        function checkMoveOrSetGameOver(){\r\n            console.log(props.mirroring)\r\n            if(isInSnakeElements(snake.getHeadPosition().x + (snake.getHeadPosition().y * fieldHeight ), false))\r\n                     {\r\n                        console.log(\"hit snake\")\r\n                        setGameOver(true);\r\n            }else if(   \r\n                    (snake.elements[0].x === 0 && snake.direction === Directions.LEFT) || \r\n                    (snake.elements[0].x ===  fieldWidth -1 && snake.direction === Directions.RIGHT) || \r\n                    (snake.elements[0].y === 0 && snake.direction === Directions.TOP) ||\r\n                    (snake.elements[0].y === fieldHeight-1 && snake.direction === Directions.BOTTOM))\r\n                    {\r\n                    if(props.mirroring){\r\n                        snake.mirrorMove(fieldWidth, fieldHeight);\r\n                    }else{\r\n                        setGameOver(true);\r\n                    }\r\n            }else{             \r\n                snake.move();\r\n            }\r\n        }\r\n\r\n        if(!gameOver)\r\n        {   \r\n           \r\n            var myTimeout = setTimeout(()=> {\r\n                \r\n                checkAndChangeSnakeDirection()\r\n                checkAndAddTailElement();\r\n                checkAndEatElement();\r\n                checkMoveOrSetGameOver();\r\n                setRound(round+1);\r\n            },speedLevels[props.difficulty-1])\r\n           \r\n           \r\n        }\r\n        return () => {\r\n            clearTimeout(myTimeout)\r\n\r\n             document.removeEventListener(\"keydown\", (e)=> onKeyPressed(e)) \r\n        }\r\n       \r\n    }, [round])\r\n\r\n\r\n\r\n    \r\n    return(<>\r\n            <div className=\"centerContainer\">\r\n                <div className=\"scoreContainer\">\r\n                Score: {score}\r\n                </div>\r\n                <div className=\"gameContainer\">\r\n                    {gameOver \r\n                    ?\r\n                    <GameOverOverlay \r\n                        setShowSettings = {props.setShowSettings}\r\n                        score={score}\r\n                        resetGame = {resetGame}/>\r\n                    :\r\n                    ''\r\n                    }\r\n                    {fields.map((fields,index)=>{\r\n                        if(isInSnakeElements(index,true)){\r\n                            return(<div key={index} className=\"snakeField\"></div>)\r\n\r\n                        }else if(isInNewElement(index)){\r\n\r\n                            return(<div key={index} className=\"elementField\"></div>)\r\n\r\n                        }else{\r\n\r\n                            return(<div key={index} className=\"field\"></div>)\r\n                            \r\n                        }\r\n                    })}\r\n                </div>\r\n            </div>\r\n    </>)\r\n}\r\n\r\n\r\nexport default Game;","C:\\Users\\merli\\Documents\\Snake\\snake\\src\\Game\\Snake\\Element.js",[],"C:\\Users\\merli\\Documents\\Snake\\snake\\src\\Game\\GameOverOverlay\\GameOverOverlay.js",[],"C:\\Users\\merli\\Documents\\Snake\\snake\\src\\Game\\Snake\\Snake.js",[],"C:\\Users\\merli\\Documents\\Snake\\snake\\src\\Game\\Snake\\Directions.js",[],"C:\\Users\\merli\\Documents\\Snake\\snake\\src\\Game\\Snake\\getReverseDirections.js",[],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":2,"column":26,"nodeType":"60","messageId":"61","endLine":2,"endColumn":35},{"ruleId":"58","severity":1,"message":"62","line":5,"column":8,"nodeType":"60","messageId":"61","endLine":5,"endColumn":12},{"ruleId":"58","severity":1,"message":"63","line":29,"column":14,"nodeType":"60","messageId":"61","endLine":29,"endColumn":38},{"ruleId":"58","severity":1,"message":"64","line":6,"column":10,"nodeType":"60","messageId":"61","endLine":6,"endColumn":13},{"ruleId":"58","severity":1,"message":"65","line":43,"column":13,"nodeType":"60","messageId":"61","endLine":43,"endColumn":28},{"ruleId":"66","severity":1,"message":"67","line":195,"column":8,"nodeType":"68","endLine":195,"endColumn":15,"suggestions":"69"},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'diff' is defined but never used.","'setNumberModelDifficulty' is defined but never used.","'Dir' is defined but never used.","'indexInElements' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'addElements', 'createNewElement', 'gameOver', 'isInSnakeElements', 'newDirection', 'newElement', 'onKeyPressed', 'props.difficulty', 'props.mirroring', 'score', and 'snake'. Either include them or remove the dependency array. You can also do a functional update 'setScore(s => ...)' if you only need 'score' in the 'setScore' call.","ArrayExpression",["72"],"no-global-assign","no-unsafe-negation",{"desc":"73","fix":"74"},"Update the dependencies array to be: [addElements, createNewElement, gameOver, isInSnakeElements, newDirection, newElement, onKeyPressed, props.difficulty, props.mirroring, round, score, snake]",{"range":"75","text":"76"},[6466,6473],"[addElements, createNewElement, gameOver, isInSnakeElements, newDirection, newElement, onKeyPressed, props.difficulty, props.mirroring, round, score, snake]"]